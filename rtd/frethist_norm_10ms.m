function fret_hist=frethist_norm_10ms(filename)%--------------------------------------------------------------------------%FRETHIST.m takes takes output from sorttraces.m or autotrace.m, and forms%2D population histograms with FRET on the y-axis, time on the x-axis, and%population on the z-axis. At the command line, frethist asks for%instructions regarding post-synchronization of the FRET traces. There%are three possible answers:%           %           'n': Do not post-synchronize. Outputs space-delimited text file%                with tag "_frethist".%           'y': Post-synchronize each FRET traces to the time step at%                which FRET first occurs within some interval set by the%                "synch" variables, which are defined below. Output it%                 tagged with "_frethist_ps".%           'i': Iteratively post-synchronize each FRET trace such that%                every individual FRET event occurring within the "synch"%                interval will be post-synchronized independently. Output %                is tagged with "_frethist_ips".%%Multiple _fret.txt files may be loaded at one time, outputing one%histogram called "FREThist.txt"%%       -JBM, 3/2006%%Added the ability to read files which contain molecule ids. And updated%the colormap for contour plotting. frethist_colormap.txt must be%available, and the path must be updated on line 194.%%       -JBM, 12/06%% Modified for rt_data %--------------------------------------------------------------------------%-----Bin size for FRET histogram:bin=0.035;%-----FRET value interval between which events are post-synchronized:%-----synch2 > synch1synch1=0.125;synch2=10;  %what is this useful for??%-----Time (in frames) after which an event will not be considered during%-----post-synchronization:endtime=1250; %why bother??%-----Number of time steps within which a Cy3 blink accurs:blink=3;%-----Number of frames before the point of post-synchronization at which%-----histogram begins:backset=8;%----- Integration time is equal to the number of frames over which is integrated%----- to calc. the normalization area:integration_time=100;DT=0.01;no_frames=2500;CONTOUR_LENGTH=50;%----- If not already specified, ask user for filesfiles = 0;fret_data = [];if nargin>0,    files = 1;    file = filename;    [d,a,fret_data] = loadTraces(file);else    while 1,        % Get filename from user        [filename,filepath]=uigetfile('*.txt','Choose a fret file:');        if filename == 0, break; end        % Load traces from the specified file        file=strcat(filepath,filename);        [d,a,fret] = loadTraces(file);        % Add the traces to the current list        fret_data = [fret_data ; fret];        files = files+1;        disp('Another file? If not, press cancel.');    endendif files==0    disp('No files selected, exiting.');    return;end%----- Pick a filename to save the histogram data toif files==1    outfile=strrep(file,'.txt','_frethist.txt');else    outfile='frethist.txt';end%-----The portion of the data array that contain fret values:s=size(fret_data);[nTraces,nFrames] = size(fret_data);disp('Total number of FRET traces, and length of trace:'), disp(s);%-----Axes for histogram:time_axis=1:nFrames;fret_axis=-0.2:bin:1.2;%-----Initialize histogram array, setting the time step in the first row,%-----and the FRET bins in the first column. This is done for import into%-----Origin.fret_hist=zeros(length(fret_axis)+1,length(time_axis)+1);fret_hist(1,1)=0;fret_hist(1,2:end)=time_axis;fret_hist(2:end,1)=fret_axis';answer=input('Postsynchronize FRET traces (y/n/i)?','s');switch (answer)%-----No post-synchronization:case 'n'    for k=1:nFrames        fret_hist(2:end,k+1)=hist(fret_data(:,k),fret_axis)';    end%-----Post-synchronize each FRET trace once:case 'y'    empty_mol=[];  %indexes of traces which have no events to syncronize    data_mol=[];   %indexes of accepted traces    for j=1:nTraces        % Find locations in trace j where sync1<FRET<sync2        tmp=(fret_data(j,:)>=synch1)+(fret_data(j,:)<=synch2)-1;        inds=find(tmp);        inds=inds(find(inds<=endtime));        if ~isempty(inds)            start = inds(1);  %first frame above threshold                        % Leave <backset> before event to show baseline            start = start-backset+1;            if start<1, start=1; end            % Add this event to the collective FRET histogram            % Padding data so hist() understands it should make a 2d histogram            data = fret_data(j,start:end);            data = [data ; repmat(NaN,1,numel(data))];                        last = nFrames-start+1;            fret_hist(2:end,2:last+1) = fret_hist(2:end,2:last+1) + ...                 hist( data, fret_axis );            % Add trace to selected traces            data_mol=[data_mol;j];        % Add to list of trace with no events to synchronize        else            empty_mol=[empty_mol;j];        end    end    outfile=strrep(outfile,'frethist.txt','frethist_ps.txt');            %-----Post-synchronize iteratively every FRET event in each trace:case 'i'    for i=1:s(1)        tmp=(fret_data(i,:)>=synch1)+(fret_data(i,:)<=synch2)-1;        inds=find(tmp);        inds=inds(find(inds<=endtime));        if ~isempty(inds)            start=inds(1);            if start<=backset                start=1;            else                start=start-backset+1;            end            for j=2:numel(inds)                if inds(j)-inds(j-1)>blink                    for k=start:(inds(j)-1)                        fret_hist(2:end,k+2-start)=...                            fret_hist(2:end,k+2-start)+...                            hist(fret_data(i,k),fret_axis)';                    end                    start=inds(j)-backset+1;                else                    continue;                end            end        end    end    outfile=strrep(outfile,'frethist.txt','frethist_ips.txt');end%----- Normalize frethistfrethist_norm(:,1:integration_time)=fret_hist(:,1:integration_time);TimeData=zeros(1,no_frames+1);for i=2:no_frames+1    TimeData(1,i)=(i-2)*DT;endans=input('Constant Normalization Factor (y/n)?','s');switch (ans)    %-----Normalization of Fret-Histogram:    case 'n'        frethist_norm(1,1:integration_time)=TimeData(1,1:integration_time);        norm_factor=sum(sum(frethist_norm(2:end,2:integration_time)));        frethist_norm(2:end,2:integration_time)=100*(frethist_norm(2:end,2:integration_time)/norm_factor);        disp('summe');disp(sum(sum(frethist_norm(2:end,2:integration_time))));        disp('normFactor');disp(sum(sum(fret_hist(2:end,2:integration_time))));    case 'y'        norm_factor=input('Normalization Factor:');        frethist_norm(1,1:integration_time)=TimeData(1,1:integration_time);        frethist_norm(2:end,2:integration_time)=100*(frethist_norm(2:end,2:integration_time)/norm_factor);        disp('summe');disp(sum(sum(frethist_norm(2:end,2:integration_time))));endif exist( 'empty_mol', 'var' ),    disp('No of not ps. traces:');disp(size(empty_mol,1));end%----- Save the histgram data to file -- for importing into Origindisp('Writing histogram to:'), disp(outfile);dlmwrite(outfile,frethist_norm,' ');%----- Display contour plot -- same colormap as Originfigure;%set(gcf,'Position',[500 300 400 500]);set(gcf,'Position',[562 454 342 337]);% The contour lines used here are designed to mimic Origin'scon = 0:0.01:0.14;cmap=dlmread('frethist_colormap_peter.txt')/255;[C,hand]=contourf(time_axis(1:CONTOUR_LENGTH),fret_axis,...    frethist_norm(2:end,2:CONTOUR_LENGTH+1),con);set(gca,'PlotBoxAspectRatio',[1.5 2 1]);set(hand,'LineColor','none');colormap(cmap);axis([0 CONTOUR_LENGTH -0.15 0.8]);xlabel('Time (frames)');ylabel('FRET');zoom on;return