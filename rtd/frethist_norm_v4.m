function [nTraces,norm_factor,frethist_norm]=frethist_norm_v4(filename,normMethod,plotGraph,sampling,norm)%--------------------------------------------------------------------------%FRETHIST.m takes takes output from sorttraces.m or autotrace.m, and forms%2D population histograms with FRET on the y-axis, time on the x-axis, and%population on the z-axis. At the command line, frethist asks for%instructions regarding post-synchronization of the FRET traces. There%are three possible answers:%           %           'n': Do not post-synchronize. Outputs space-delimited text file%                with tag "_frethist".%           'y': Post-synchronize each FRET traces to the time step at%                which FRET first occurs within some interval set by the%                "synch" variables, which are defined below. Output it%                 tagged with "_frethist_ps".%           'i': Iteratively post-synchronize each FRET trace such that%                every individual FRET event occurring within the "synch"%                interval will be post-synchronized independently. Output %                is tagged with "_frethist_ips".%%Multiple _fret.txt files may be loaded at one time, outputing one%histogram called "FREThist.txt"%%       -JBM, 3/2006%%Added the ability to read files which contain molecule ids. And updated%the colormap for contour plotting. frethist_colormap.txt must be%available, and the path must be updated on line 194.%%       -JBM, 12/06%% Modified for rt_data and pipeline%       -PG, 30/2010%--------------------------------------------------------------------------%-----Bin size for FRET histogram:bin=0.035;%-----FRET value interval between which events are post-synchronized:%-----synch2 > synch1synch1=0.13;synch2=10;  %-----Time (in frames) after which an event will not be considered during%-----post-synchronization:endtime=2400;%-----Number of frames before the point of post-synchronization at which%-----histogram begins:backset=6;%----- Integration time is equal to the number of frames over which is integrated%----- to calc. the normalization area:integration_time=100;DT=sampling/1000; %in secondsCONTOUR_LENGTH=50;%----- If not already specified, ask user for filesfiles = 0;fret_data = [];if nargin>0,    files = 1;    file = filename;    [d,a,fret_data] = loadTraces(file);else    while 1,        % Get filename from user        [filename,filepath]=uigetfile('*.txt','Choose a fret file:');        if filename == 0, break; end        % Load traces from the specified file        file=strcat(filepath,filename);        [d,a,fret] = loadTraces(file);        % Add the traces to the current list        fret_data = [fret_data ; fret];        files = files+1;        disp('Another file? If not, press cancel.');    endendif files==0    disp('No files selected, exiting.');    return;end%-----The portion of the data array that contain fret values:s=size(fret_data);[nTraces,nFrames] = size(fret_data);%-----Axes for histogram:time_axis=1:nFrames;fret_axis=-0.2:bin:1.2;%-----Initialize histogram array, setting the time step in the first row,%-----and the FRET bins in the first column. This is done for import into%-----Origin.fret_hist=zeros(length(fret_axis)+1,length(time_axis)+1);fret_hist(1,1)=0;fret_hist(1,2:end)=time_axis;fret_hist(2:end,1)=fret_axis';%-----Post-synchronize each FRET trace once:empty_mol=[];  %indexes of traces which have no events to syncronizedata_mol=[];   %indexes of accepted tracesfor j=1:nTraces    % Find locations in trace j where sync1<FRET<sync2    tmp=(fret_data(j,:)>=synch1)+(fret_data(j,:)<=synch2)-1;    inds=find(tmp);    inds=inds(find(inds<=endtime));    if ~isempty(inds)        start = inds(1);  %first frame above threshold                % Leave <backset> before event to show baseline        start = start-backset+1;        if start<1, start=1; end                % Add this event to the collective FRET histogram        % Padding data so hist() understands it should make a 2d histogram        data = fret_data(j,start:end);        data = [data ; repmat(NaN,1,numel(data))];         last = nFrames-start+1;        fret_hist(2:end,2:last+1) = fret_hist(2:end,2:last+1) + ...        hist( data, fret_axis );                % Add trace to selected traces        data_mol=[data_mol;j];        % Add to list of trace with no events to synchronize    else        empty_mol=[empty_mol;j];    endend%outfile=strrep(outfile,'frethist.txt','frethist_ps.txt');            %-----Normalization of Fret-Histogram:frethist_norm(:,1:integration_time)=fret_hist(:,1:integration_time);TimeData=zeros(1,nFrames+1);for i=2:nFrames+1    TimeData(1,i)=((i-2)-backset+1)*DT;endif nargin>=1,    answer = num2str(normMethod);else    answer=input('sum of all matrix elements (1), Constant (2), Not_Normalized (3)?','s');    normMethod=str2double(answer);endswitch (answer)    case '1'        frethist_norm(1,1:integration_time)=TimeData(1,1:integration_time);        norm_factor=sum(sum(frethist_norm(2:end,2:integration_time)));        frethist_norm(2:end,2:integration_time)=100*(frethist_norm(2:end,2:integration_time)/norm_factor);             case '2'        if nargin>2,            norm_factor = norm;        else            norm_factor=input('Normalization Factor:');        end                frethist_norm(1,1:integration_time)=TimeData(1,1:integration_time);        frethist_norm(2:end,2:integration_time)=100*(frethist_norm(2:end,2:integration_time)/norm_factor);                         case '3'        norm_factor=0;        frethist_norm=fret_hist;end%----- Display contour plot -- same colormap as Originif plotGraph==1 && normMethod<3        figure;        set(gcf,'Position',[562 454 342 337]);        % The contour lines used here are designed to mimic Origin's        con = 0:0.01:0.13;        cmap=dlmread('frethist_colormap_peter.txt')/255;        [C,hand]=contourf(time_axis(1:CONTOUR_LENGTH),fret_axis,...        frethist_norm(2:end,2:CONTOUR_LENGTH+1),con);        set(gca,'PlotBoxAspectRatio',[1.5 2 1]);        set(hand,'LineColor','none');        colormap(cmap);        axis([0 CONTOUR_LENGTH -0.15 0.8]);        xlabel('Time (frames)');        ylabel('FRET');        zoom on;endif exist( 'empty_mol', 'var' ),    %disp('No of not ps. traces:');disp(size(empty_mol,1));end%----- Save the histgram data to file -- for importing into Originif  nargin>=1    if normMethod==1        outfile=strrep(file,'.txt','_fhst1.txt');    elseif normMethod==2        outfile=strrep(file,'.txt','_fhst2.txt');    elseif normMethod==3        outfile=strrep(file,'.txt','_fhst3.txt');     end    dlmwrite(outfile,frethist_norm,' ');else     if normMethod==1        dlmwrite('_fhst1.txt',frethist_norm,' ');    elseif normMethod==2        dlmwrite('_fhst2.txt',frethist_norm,' ');    elseif normMethod==3        dlmwrite('_fhst3.txt',frethist_norm,' ');    endendreturn