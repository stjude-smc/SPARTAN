classdef Movie_TIFF
% Movie_TIFF is a wrapper for a stack of TIFF images, as generated by imaging
% software like MetaMorph. See Movie for interface details.
%

% TODO: first get this class to work with loading headers with every frame
% having a seperate entry. Then get everything working with gettraces. Then
% try to optimize the code by, for example, only reading the first frame's
% annotation.
%
% The readFrames() way of getting data is a reasonable interface, but it would
% be even cleaner if the data were wrapped almost like mmapPassthrough so that
% it appears to be a data "property" of the movie, but instead just contains
% pointers and methods to read the data. Could call it freadPassthrough. On the
% other hand, am I making things more complicated than needed?

properties (SetAccess=protected, GetAccess=public)
    % These varibles are part of the standard interface
    filename = ''; % full path and filename to loaded file
    
    nX=0;       % size (in pixels) of x dimension (columns).
    nY=0;       % size (in pixels) of y dimension (rows).
    nFrames=0;  % number of images in the stack.
    
    timeAxis=[]; % wall time of the start of each frame (starts with zero).
    
    stkHeader = struct([]); %

end %end public properties


properties (SetAccess=protected, GetAccess=protected),
    dataOffsets = []; %offsets to data segments in the movie file, with
                      %one offset per plane (frame).
end


methods
    
    function obj = Movie_TIFF( filename )
        obj.filename = filename;
        
        % Read the TIFF file and get all useful header information. The data
        % sections are ignored. Data-access offsets are stored in tiffData.
        [obj.stkHeader,obj.dataOffsets] = readTiffHeader( filename );
        
        % Extract basic image metadata
        obj.nX = obj.stkHeader(1).width;
        obj.nY = obj.stkHeader(1).height;
        obj.nFrames = numel( obj.dataOffsets );
        
        % Generate an approximate time axis. The actual timestamps are in the
        % MM_private1 (UIC1, 33628) field untag tag #16 (CreateTime). The LONG
        % data element is a pointer to a LONG [date,time]. FIXME
        x = repmat( obj.stkHeader(1).MM.Exposure, [1 obj.nFrames] );
        obj.timeAxis = [0 cumsum(x(1:end-1))];
        
    end %constructor
    
    
    % Data access methods. Data are only loaded when needed by these functions.
    function data = readFrames( obj, idxStart, idxEnd )
        
        % Parse input arguments.
        % First parameter can be a vector of indexes.
        if nargin==2,
            idx = reshape(idxStart, [1 numel(idxStart)]);
        else
            assert( idxEnd>=idxStart && idxEnd<=obj.nFrames && idxStart>=1 );
            idx = idxStart:idxEnd;
        end
        
        % Preallocate space for the output data.
        data = zeros( obj.nY,obj.nX,numel(idx), 'uint16' );
        
        
        fid = fopen( obj.filename );
        
        framesRead=0;
        for i=idx,
            % Move to the start of the data section
            fseek( fid, obj.dataOffsets(i), 'bof' );
            
            % FIXME: supports only uint16!!
            frame = fread( fid, [obj.nX obj.nY], '*uint16' );
            data(:,:,framesRead+1) = frame';
            
            framesRead=framesRead+1;
        end
        
        fclose(fid);
    end
    
    function data = readFrame( obj, idx )
        data = squeeze( readFrames(obj,idx) );
    end
    
    
end %public methods



end %class Movie_TIFF
